package main

import "fmt"

func main() {
	primes := [6]int{2, 3, 5, 7, 11, 13}

	var s []int = primes[1:4]
	fmt.Println(s)
	// [3 5 7]

	names := [4]string{
		"John",
		"Paul",
		"George",
		"Ringo",
	}
	fmt.Println(names) // [John Paul George Ringo]

	a := names[0:2]
	b := names[1:3]
	fmt.Println(a, b) // [John Paul] [Paul George]

	b[0] = "XXX"
	fmt.Println(a, b)  // [John XXX] [XXX George]
	fmt.Println(names) // [John XXX George Ringo]

	q := []int{2, 3, 5, 7, 11, 13333}
	fmt.Println(q) // [2 3 5 7 11 13333]

	r := []bool{true, false, true, true, false, false}
	fmt.Println(r) // [true false true true false false]

	s2 := []struct {
		i int
		b bool
	}{
		{2, true},
		{3, false},
		{5, true},
		{7, true},
		{11, false},
		{13, true},
	}
	fmt.Println(s2) // [{2 true} {3 false} {5 true} {7 true} {11 false} {13 true}]

	s3 := []int{2, 3, 5, 7, 11, 13}

	s3 = s3[1:4]
	fmt.Println(s3) // [3 5 7]

	s3 = s3[:2]
	fmt.Println(s3) // [3 5]

	s3 = s3[1:]
	fmt.Println(s3) // [5]

	fmt.Println("___________Slice length and capacity________________")
	slice	:= []int{2, 3, 5, 7, 11, 13}
	printSlice(slice)

	// Slice the slice to give it zero length.
	slice = slice[:0]
	printSlice(slice)

	// Extend its length.
	slice = slice[:4]
	printSlice(slice)

	// Drop its first two values.
	slice = slice[2:]
	printSlice(slice)

// ___________Slice length and capacity________________
// len=6 cap=6 [2 3 5 7 11 13]
// len=0 cap=6 []
// len=4 cap=6 [2 3 5 7]
// len=2 cap=4 [5 7]

// Nil slices / Нулевые срезы
// Нулевое значение среза — это  nil / ноль.

// Нулевой срез имеет длину и ёмкость 0 и не имеет базового массива.
	var s5 []int
	fmt.Println(s5, len(s5), cap(s5))  // [] 0 0

	if s5 == nil {
		fmt.Println("nil!")  // nil!
	}
}


func printSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}



// Slices / Срезы
// Массив имеет фиксированный размер. Срез, напротив, представляет собой
// гибкое представление элементов массива с динамически изменяемым размером.
// На практике срезы встречаются гораздо чаще, чем массивы.

// Тип []T — это срез с элементами типа T.

// Срез формируется указанием двух индексов, нижней и верхней границ,
// разделённых двоеточием:

// a[low : high]
// Это выбирает полуоткрытый диапазон, включающий первый элемент, но исключающий последний.

// Следующее выражение создаёт срез, включающий элементы с 1 по 3 массива a:

// a[1:4]

// Срезы подобны ссылкам на массивы.
// Срез не хранит никаких данных, он просто описывает часть базового массива.

// Изменение элементов среза приводит к изменению соответствующих элементов базового массива.

// Другие срезы, использующие тот же базовый массив, увидят эти изменения.

// Литерал среза подобен литералу массива без длины.

// Это литерал массива:
// [3]bool{true, true, false}

// Это создаёт тот же массив, что и выше, а затем создаёт
// срез, ссылающийся на него:
// []bool{true, true, false}

// Значения по умолчанию для среза
// При срезе можно опустить верхнюю или нижнюю границы,
// чтобы использовать их значения по умолчанию.

// Нижняя граница по умолчанию равна нулю, а верхняя — длине среза.

// Для массива

// var a [10]int
// эти выражения среза эквивалентны:

// a[0:10]
// a[:10]
// a[0:]
// a[:]

// Slice length and capacity
// A slice has both a length and a capacity.
// Длина и ёмкость среза
// Срез имеет как длину, так и ёмкость.

// Длина среза — это количество содержащихся в нём элементов.

// Ёмкость среза — это количество элементов в базовом массиве, начиная с первого элемента среза.

// Длину и ёмкость среза s можно получить с помощью выражений len(s) и cap(s).

// Вы можете увеличить длину среза, повторно разрезав его, при условии, что он имеет достаточную ёмкость. Попробуйте изменить одну из операций среза в примере программы, чтобы увеличить его ёмкость, и посмотрите, что произойдёт.
